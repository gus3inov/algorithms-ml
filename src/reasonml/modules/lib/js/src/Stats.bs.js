// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Shirts = require("./Shirts.bs.js");
var Process = require("process");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function map2(optX, optY, f) {
  if (optX !== undefined && optY !== undefined) {
    return Caml_option.some(Curry._2(f, Caml_option.valFromOption(optX), Caml_option.valFromOption(optY)));
  }
  
}

function optInt(str) {
  var exit = 0;
  var fNum;
  try {
    fNum = Caml_format.caml_int_of_string(str);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "int_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return fNum;
  }
  
}

function optFloat(str) {
  var exit = 0;
  var fFloat;
  try {
    fFloat = Caml_format.caml_float_of_string(str);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "float_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return fFloat;
  }
  
}

function lineReducer(acc, line) {
  var items = line.split(",");
  if (items.length !== 7) {
    return acc;
  } else {
    var orderRecord = map2(map2(map2(map2(map2(map2(map2(/* record */[
                                  /* quantity */0,
                                  /* size : Small */0,
                                  /* sleeve : Short */0,
                                  /* color : White */0,
                                  /* pattern : Solid */0,
                                  /* cuff : Button */0,
                                  /* collar : Button */0
                                ], optInt(Caml_array.caml_array_get(items, 0)), (function (result, n) {
                                    return /* record */[
                                            /* quantity */n,
                                            /* size */result[/* size */1],
                                            /* sleeve */result[/* sleeve */2],
                                            /* color */result[/* color */3],
                                            /* pattern */result[/* pattern */4],
                                            /* cuff */result[/* cuff */5],
                                            /* collar */result[/* collar */6]
                                          ];
                                  })), Shirts.Size[/* fromString */1](Caml_array.caml_array_get(items, 1)), (function (result, size) {
                                return /* record */[
                                        /* quantity */result[/* quantity */0],
                                        /* size */size,
                                        /* sleeve */result[/* sleeve */2],
                                        /* color */result[/* color */3],
                                        /* pattern */result[/* pattern */4],
                                        /* cuff */result[/* cuff */5],
                                        /* collar */result[/* collar */6]
                                      ];
                              })), Shirts.Sleeve[/* fromString */1](Caml_array.caml_array_get(items, 2)), (function (result, sleeve) {
                            return /* record */[
                                    /* quantity */result[/* quantity */0],
                                    /* size */result[/* size */1],
                                    /* sleeve */sleeve,
                                    /* color */result[/* color */3],
                                    /* pattern */result[/* pattern */4],
                                    /* cuff */result[/* cuff */5],
                                    /* collar */result[/* collar */6]
                                  ];
                          })), Shirts.Color[/* fromString */1](Caml_array.caml_array_get(items, 3)), (function (result, color) {
                        return /* record */[
                                /* quantity */result[/* quantity */0],
                                /* size */result[/* size */1],
                                /* sleeve */result[/* sleeve */2],
                                /* color */color,
                                /* pattern */result[/* pattern */4],
                                /* cuff */result[/* cuff */5],
                                /* collar */result[/* collar */6]
                              ];
                      })), Shirts.Pattern[/* fromString */1](Caml_array.caml_array_get(items, 4)), (function (result, pattern) {
                    return /* record */[
                            /* quantity */result[/* quantity */0],
                            /* size */result[/* size */1],
                            /* sleeve */result[/* sleeve */2],
                            /* color */result[/* color */3],
                            /* pattern */pattern,
                            /* cuff */result[/* cuff */5],
                            /* collar */result[/* collar */6]
                          ];
                  })), Shirts.Cuff[/* fromString */1](Caml_array.caml_array_get(items, 5)), (function (result, cuff) {
                return /* record */[
                        /* quantity */result[/* quantity */0],
                        /* size */result[/* size */1],
                        /* sleeve */result[/* sleeve */2],
                        /* color */result[/* color */3],
                        /* pattern */result[/* pattern */4],
                        /* cuff */cuff,
                        /* collar */result[/* collar */6]
                      ];
              })), Shirts.Collar[/* fromString */1](Caml_array.caml_array_get(items, 6)), (function (result, collar) {
            return /* record */[
                    /* quantity */result[/* quantity */0],
                    /* size */result[/* size */1],
                    /* sleeve */result[/* sleeve */2],
                    /* color */result[/* color */3],
                    /* pattern */result[/* pattern */4],
                    /* cuff */result[/* cuff */5],
                    /* collar */collar
                  ];
          }));
    if (orderRecord !== undefined) {
      return /* :: */[
              orderRecord,
              acc
            ];
    } else {
      return acc;
    }
  }
}

function printStatistics(orders) {
  var colorDistribution = Belt_List.reduce(orders, Belt_Map.make(Shirts.ColorComparator), (function (acc, item) {
          var n = Belt_Map.getWithDefault(acc, item[/* color */3], 0);
          return Belt_Map.set(acc, item[/* color */3], n + item[/* quantity */0] | 0);
        }));
  console.log("Color", "Quanity");
  return Belt_Map.forEach(colorDistribution, (function (key, value) {
                console.log(Shirts.Color[/* toString */0](key), value);
                return /* () */0;
              }));
}

function processFile(inFileName) {
  var fileContents = Fs.readFileSync(inFileName, "utf8");
  var lines = fileContents.split("\n").slice(1);
  return printStatistics(Belt_Array.reduce(lines, /* [] */0, lineReducer));
}

var nodeArg = Belt_Array.get(Process.argv, 0);

var progArg = Belt_Array.get(Process.argv, 1);

var fileArg = Belt_Array.get(Process.argv, 2);

if (fileArg !== undefined) {
  processFile(fileArg);
} else if (nodeArg !== undefined && progArg !== undefined) {
  console.log("Usage: " + (nodeArg + (" " + (progArg + " inputfile.csv"))));
} else {
  console.log("How did you get here without NodeJS or a program to run?");
}

exports.map2 = map2;
exports.optInt = optInt;
exports.optFloat = optFloat;
exports.lineReducer = lineReducer;
exports.printStatistics = printStatistics;
exports.processFile = processFile;
exports.nodeArg = nodeArg;
exports.progArg = progArg;
exports.fileArg = fileArg;
/* nodeArg Not a pure module */
