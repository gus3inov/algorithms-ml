// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Payment$Shirts = require("./Payment.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var principalInput = document.getElementById("principal");

var principalInput$1 = (principalInput == null) ? undefined : Caml_option.some(principalInput);

var aprInput = document.getElementById("apr");

var aprInput$1 = (aprInput == null) ? undefined : Caml_option.some(aprInput);

var yearsInput = document.getElementById("years");

var yearsInput$1 = (yearsInput == null) ? undefined : Caml_option.some(yearsInput);

var paymentElem = document.getElementById("payment");

var paymentElem$1 = (paymentElem == null) ? undefined : Caml_option.some(paymentElem);

function toInt(s) {
  var exit = 0;
  var result;
  try {
    result = Caml_format.caml_int_of_string(s);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "int_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return result;
  }
  
}

function toFloat(s) {
  var exit = 0;
  var result;
  try {
    result = Caml_format.caml_float_of_string(s);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "float_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return result;
  }
  
}

function getStringValue(id) {
  var element = document.getElementById(id);
  return Belt_Option.map(Belt_Option.map((element == null) ? undefined : Caml_option.some(element), (function (prim) {
                    return prim;
                  })), (function (prim) {
                return prim.value;
              }));
}

function getIntValue(id) {
  return Belt_Option.flatMap(getStringValue(id), toInt);
}

function getFloatValue(id) {
  return Belt_Option.flatMap(getStringValue(id), toFloat);
}

function calculate(param) {
  var principalValue = Belt_Option.flatMap(getStringValue("principal"), toFloat);
  var aprValue = Belt_Option.flatMap(getStringValue("apr"), toFloat);
  var yearsValue = Belt_Option.flatMap(getStringValue("years"), toInt);
  var payment = principalValue !== undefined && aprValue !== undefined && yearsValue !== undefined ? Payment$Shirts.payment(principalValue, aprValue, yearsValue) : undefined;
  var paymentString = payment !== undefined ? payment.toFixed(2) : "";
  Belt_Option.map(paymentElem$1, (function (__x) {
          __x.innerText = paymentString;
          return /* () */0;
        }));
  return /* () */0;
}

function addEvent(input, f) {
  if (input !== undefined) {
    Caml_option.valFromOption(input).addEventListener("input", f);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

addEvent(principalInput$1, calculate);

addEvent(aprInput$1, calculate);

addEvent(yearsInput$1, calculate);

var D = 0;

var Document = 0;

var Elem = 0;

exports.D = D;
exports.Document = Document;
exports.Elem = Elem;
exports.principalInput = principalInput$1;
exports.aprInput = aprInput$1;
exports.yearsInput = yearsInput$1;
exports.paymentElem = paymentElem$1;
exports.toInt = toInt;
exports.toFloat = toFloat;
exports.getStringValue = getStringValue;
exports.getIntValue = getIntValue;
exports.getFloatValue = getFloatValue;
exports.calculate = calculate;
exports.addEvent = addEvent;
/* principalInput Not a pure module */
